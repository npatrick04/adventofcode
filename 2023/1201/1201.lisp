(defun decode-line1 (str)
  (let* ((first (find-if #'digit-char-p str :from-end nil))
	 (last  (find-if #'digit-char-p str :from-end t))
	 (digits (mapcar #'digit-char-p (list first last))))
    (+ (* (first digits) 10) (second digits))))

(defun find-num (str num numstr from-end)
  (let ((nump (search num str :from-end from-end))
	(numstrp (search numstr str :from-end from-end)))
    (if (and nump numstrp)
	(if from-end (max nump numstrp) (min nump numstrp))
	(if nump nump numstrp))))

(defun find-match (str min-max from-end)
  (declare (optimize debug))
  (let ((zero (find-num str "0" "zero" from-end))
	(one (find-num str "1" "one" from-end))
	(two (find-num str "2" "two" from-end))
	(three (find-num str "3" "three" from-end))
	(four (find-num str "4" "four" from-end))
	(five (find-num str "5" "five" from-end))
	(six (find-num str "6" "six" from-end))
	(seven (find-num str "7" "seven" from-end))
	(eight (find-num str "8" "eight" from-end))
	(nine (find-num str "9" "nine" from-end)))
    (let ((the-match (apply #'funcall min-max (remove nil (list zero one two three four five six seven eight nine)))))
      (cond
	((equalp the-match zero) 0)
	((equalp the-match one) 1)
	((equalp the-match two) 2)
	((equalp the-match three) 3)
	((equalp the-match four) 4)
	((equalp the-match five) 5)
	((equalp the-match six) 6)
	((equalp the-match seven) 7)
	((equalp the-match eight) 8)
	((equalp the-match nine) 9)))))

(defun decode-line2 (str)
  (declare (optimize debug))
  (let* ((first (find-match str #'min nil))
	 (last  (find-match str #'max t)))
    (+ (* first 10) last)))

(defun process-file (filename)
  (with-open-file (in filename)
    (do* ((line (read-line in nil nil)
		(read-line in nil nil))
	  (linenum (decode-line2 line)
		   (decode-line2 (if line line "00")))
	  (accum linenum (+ accum linenum)))
	 ((null line) accum)
      (format t "Num: ~A, Accum: ~A~%" linenum accum))))
